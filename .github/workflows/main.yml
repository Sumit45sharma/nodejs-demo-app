# CI/CD Pipeline for Node.js Demo App
name: CI/CD Pipeline

# Trigger the workflow on push to main branch or pull request
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Environment variables used across jobs
env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME: nodejs-demo-app
  REGISTRY: docker.io

jobs:
  # Job 1: Test and Build
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run linting
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      # Step 5: Run tests
      - name: Run tests
        run: npm test -- --forceExit --detectOpenHandles --maxWorkers=2
        timeout-minutes: 5

      # Step 6: Upload test coverage
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('coverage/**/*') != ''
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 2: Build and Push Docker Image
  build-and-push:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 3000:3000 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          docker stop test-container

  # Job 3: Deploy
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying application..."
          echo "✅ Application deployed successfully!"
          echo "🌐 Application URL: https://your-app-domain.com"
          echo "🐳 Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          echo "Deployment completed at $(date)" > deployment/deploy-info.txt
          echo "Commit SHA: ${{ github.sha }}" >> deployment/deploy-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment/deploy-info.txt
          echo "Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> deployment/deploy-info.txt

      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment/deploy-info.txt
          retention-days: 90

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
